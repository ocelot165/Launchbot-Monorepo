service: volatilis-auction-bot
frameworkVersion: "3"
plugins:
  - serverless-esbuild
  - serverless-fargate
  - serverless-offline-sqs
  - serverless-offline-dynamodb-streams
  - serverless-api-gateway-caching
  - serverless-dynamodb
  - serverless-offline
provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
  ecr:
    images:
      referralProcessor:
        path: "./src/ecs/referralProcessor"
        file: Dockerfile
  timeout: 900
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - arn:aws:dynamodb:us-east-1:381491854830:table/${file(../../config/config.${opt:stage, 'dev'}.json):TABLE_NAME}
            - arn:aws:dynamodb:us-east-1:381491854830:table/${file(../../config/config.${opt:stage, 'dev'}.json):REFERRER_TABLE_NAME}
            - arn:aws:dynamodb:us-east-1:381491854830:table/${file(../../config/config.${opt:stage, 'dev'}.json):REFERRAL_POINTS_TABLE_NAME}
            - arn:aws:dynamodb:us-east-1:381491854830:table/${file(../../config/config.${opt:stage, 'dev'}.json):REFERRAL_TXS_TABLE_NAME}
            - arn:aws:dynamodb:us-east-1:381491854830:table/${file(../../config/config.${opt:stage, 'dev'}.json):USER_ID_MAPPING_TABLE_NAME}
        - Effect: Allow
          Action:
            - sqs:SendMessage
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
            - sqs:DeleteMessageBatch
          Resource:
            - Fn::GetAtt: [ClearingPriceNotificationQueue, Arn]
            - Fn::GetAtt: [ClearingPriceNotificationDLQ, Arn]
        - Effect: Allow
          Action:
            - kms:GenerateMac
          Resource: arn:aws:dynamodb:us-east-1:381491854830:table/${file(../../config/config.${opt:stage, 'dev'}.json):TABLE_NAME}
        - Effect: Allow
          Action:
            - ecs:CreateService
          Resource: "*"
        - Effect: Allow
          Action: "sts:AssumeRole"
          Resource: "*"
        - Effect: Allow
          Action:
            - ecr:GetAuthorizationToken
            - ecr:BatchCheckLayerAvailability
            - ecr:GetDownloadUrlForLayer
            - ecr:BatchGetImage
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: "*"
        - Effect: Allow
          Action:
            - kms:Decrypt
            - secretsmanager:GetSecretValue
            - kms:GenerateMac
          Resource: "*"
custom:
  bundle:
    linting: false
  serverless-dynamodb:
    stages:
      - dev
      - prod
      - staging
    start:
      docker: true
      port: 5678
      inMemory: true
      migrate: true
      seed: true
      convertEmptyValues: true
    seed:
      domain:
        sources:
          - table: ${file(../../config/config.${opt:stage, 'dev'}.json):REFERRER_TABLE_NAME}
            sources: [./sources/referrer.json]
          - table: ${file(../../config/config.${opt:stage, 'dev'}.json):REFERRAL_POINTS_TABLE_NAME}
            sources: [./sources/referralPoints.json]
  serverless-offline-sqs:
    autoCreate: true
    apiVersion: "2012-11-05"
    endpoint: http://0.0.0.0:9324
    region: us-east-1
    accessKeyId: root
    secretAccessKey: root
    skipCacheInvalidation: false
  serverless-offline-dynamodb-streams:
    apiVersion: "2013-12-02"
    endpoint: http://0.0.0.0:5678
    region: us-east-1
    accessKeyId: root
    secretAccessKey: root
    skipCacheInvalidation: false
    readInterval: 500
    pollForever: true
  apiGatewayCaching:
    enabled: true
functions:
  AuctionBotHandler:
    handler: src/functions/auctionBot.handler
    events:
      - http:
          method: post
          path: auctionBotHandler
          cors:
            origin: "*"
            headers: "*"
      - http:
          method: post
          path: auctionBotHandler/webAppReply
          cors:
            origin: "*"
            headers: "*"
      - http:
          method: post
          path: auctionBotHandler/createAuctionHandler
          cors:
            origin: "*"
            headers: "*"
      - http:
          method: post
          path: auctionBotHandler/settleAuctionHandler
          cors:
            origin: "*"
            headers: "*"
      - http:
          method: post
          path: auctionBotHandler/claimBidHandler
          cors:
            origin: "*"
            headers: "*"
      - http:
          method: post
          path: auctionBotHandler/cancelBidHandler
          cors:
            origin: "*"
            headers: "*"
      - http:
          method: post
          path: auctionBotHandler/placeBidHandler
          cors:
            origin: "*"
            headers: "*"
      - http:
          method: post
          path: auctionBotHandler/registerReferralCode
          cors:
            origin: "*"
            headers: "*"
      - http:
          method: post
          path: auctionBotHandler/getUserDetails
          cors:
            origin: "*"
            headers: "*"
      - http:
          method: post
          path: auctionBotHandler/claimReferralRewards
          cors:
            origin: "*"
            headers: "*"
      - http:
          method: post
          path: auctionBotHandler/registerAuctionNotifications
          cors:
            origin: "*"
            headers: "*"
      - http:
          method: post
          path: auctionBotHandler/cancelAuctionNotifications
          cors:
            origin: "*"
            headers: "*"
      - http:
          method: post
          path: auctionBotHandler/notifyWebhook
          cors:
            origin: "*"
            headers: "*"
      - http:
          method: get
          path: auctionBotHandler/auctionNotificationDetails
          cors:
            origin: "*"
            headers: "*"
      - http:
          method: post
          path: auctionBotHandler/getPrivateKey
          cors:
            origin: "*"
            headers: "*"
      - http:
          method: post
          path: auctionBotHandler/createTokenHandler
          cors:
            origin: "*"
            headers: "*"
      - http:
          method: post
          path: auctionBotHandler/updateAuctionDescription
          cors:
            origin: "*"
            headers: "*"
      - http:
          method: post
          path: auctionBotHandler/auctionInformationWebhook
          cors:
            origin: "*"
            headers: "*"
      - http:
          method: post
          path: auctionBotHandler/precalculateSellAmounts
          cors:
            origin: "*"
            headers: "*"
      - http:
          method: get
          path: auctionBotHandler/getRevSharingPerUser
          cors:
            origin: "*"
            headers: "*"
      - http:
          method: get
          path: auctionBotHandler/isClaimOpenForUser
          cors:
            origin: "*"
            headers: "*"
      - http:
          method: post
          path: auctionBotHandler/claimRevSharing
          cors:
            origin: "*"
            headers: "*"
      - http:
          method: post
          path: auctionBotHandler/approveForAuction
          cors:
            origin: "*"
            headers: "*"
      - http:
          method: get
          path: auctionBotHandler/getBiddingTokenPrices
          cors:
            origin: "*"
            headers: "*"
          caching:
            enabled: true
            ttlInSeconds: 300
      - http:
          method: post
          path: /auctionBotHandler/subscribeClearingPriceNotifications
          cors:
            origin: "*"
            headers: "*"
      - http:
          method: post
          path: auctionBotHandler/createGTMReferral
          cors:
            origin: "*"
            headers: "*"
      - http:
          method: post
          path: /auctionBotHandler/unsubscribeClearingPriceNotifications
          cors:
            origin: "*"
            headers: "*"
      - http:
          method: get
          path: auctionBotHandler/gtmReferralInfo
          cors:
            origin: "*"
            headers: "*"
      - http:
          method: get
          path: /auctionBotHandler/clearingPriceNotifications
          cors:
            origin: "*"
            headers: "*"
      - http:
          method: get
          path: auctionBotHandler/checkReferralExists
          cors:
            origin: "*"
            headers: "*"
    environment:
      BOT_TOKEN: ${file(../../config/config.${opt:stage, 'dev'}.json):BOT_TOKEN}
      SECRET_KEY: ${file(../../config/config.${opt:stage, 'dev'}.json):SECRET_KEY}
      PRIVATE_KEY: ${file(../../config/config.${opt:stage, 'dev'}.json):PRIVATE_KEY}
      WEB_URL: ${file(../../config/config.${opt:stage, 'dev'}.json):WEBHOOK_URL}
      CHAINID: ${file(../../config/config.${opt:stage, 'dev'}.json):CHAINID}
      TABLE_NAME: ${file(../../config/config.${opt:stage, 'dev'}.json):TABLE_NAME}
      USER_ID_MAPPING_TABLE_NAME: ${file(../../config/config.${opt:stage, 'dev'}.json):USER_ID_MAPPING_TABLE_NAME}
      REV_SHARING_TABLE_NAME: ${file(../../config/config.${opt:stage, 'dev'}.json):REV_SHARING_TABLE_NAME}
      LAST_CLAIM_REVENUE_SHARE_TABLE: ${file(../../config/config.${opt:stage, 'dev'}.json):LAST_CLAIM_REVENUE_SHARE_TABLE}
      DISTRIBUTION_QUEUE_URL: ${file(../../config/config.${opt:stage, 'dev'}.json):DISTRIBUTION_QUEUE_URL}
      # impossible to use Fn::GetAtt: [ClearingPriceNotificationQueue, Arn] for local testing. Refer to README.md
      # CLEARING_PRICE_NOTIFICATION_QUEUE_URL: ClearingPriceNotificationQueue
      CLEARING_PRICE_NOTIFICATION_QUEUE_URL: !Ref ClearingPriceNotificationQueue
      NOTIFY_WEBHOOK_SECRET: ${file(../../config/config.${opt:stage, 'dev'}.json):NOTIFY_WEBHOOK_SECRET}
      INFO_WEBHOOK_SECRET: ${file(../../config/config.${opt:stage, 'dev'}.json):INFO_WEBHOOK_SECRET}
      KMS_KEY_ID: ${file(../../config/config.${opt:stage, 'dev'}.json):KMS_KEY_ID}
      STAGE: ${opt:stage, 'dev'}
      REFERRAL_TXS_TABLE_NAME: ${file(../../config/config.${opt:stage, 'dev'}.json):REFERRAL_TXS_TABLE_NAME}
      REFERRAL_POINTS_TABLE_NAME: ${file(../../config/config.${opt:stage, 'dev'}.json):REFERRAL_POINTS_TABLE_NAME}
      REFERRER_TABLE_NAME: ${file(../../config/config.${opt:stage, 'dev'}.json):REFERRER_TABLE_NAME}
      ACCESS_KEY_ID: ${file(../../config/config.${opt:stage, 'dev'}.json):ACCESS_KEY_ID}
      SECRET_ACCESS_KEY: ${file(../../config/config.${opt:stage, 'dev'}.json):SECRET_ACCESS_KEY}
  computeClearingPrice:
    handler: src/functions/computeClearingPrice.handler
    events: # time based events (weekly)
      - schedule: rate(1 day)
    environment:
      TABLE_NAME: ${file(../../config/config.${opt:stage, 'dev'}.json):TABLE_NAME}
      CHAINID: ${file(../../config/config.${opt:stage, 'dev'}.json):CHAINID}
      ALCHEMY_API_KEY: ${file(../../config/config.${opt:stage, 'dev'}.json):ALCHEMY_API_KEY}
      STAGE: ${opt:stage, 'dev'}
  notificationGenerator:
    handler: src/functions/notificationGenerator.consume
    events:
      - stream:
          type: dynamodb
          arn:
            Fn::GetAtt:
              - AuctionsTable
              - StreamArn
          batchSize: 10
          startingPosition: LATEST
    environment:
      TABLE_NAME: ${file(../../config/config.${opt:stage, 'dev'}.json):TABLE_NAME}
      USER_ID_MAPPING_TABLE_NAME: ${file(../../config/config.${opt:stage, 'dev'}.json):USER_ID_MAPPING_TABLE_NAME}
      CHAINID: ${file(../../config/config.${opt:stage, 'dev'}.json):CHAINID}
      # impossible to use Fn::GetAtt: [ClearingPriceNotificationQueue, Arn] for local testing. Refer to README.md
      CLEARING_PRICE_NOTIFICATION_QUEUE_URL: !Ref ClearingPriceNotificationQueue
      # CLEARING_PRICE_NOTIFICATION_QUEUE_URL: http://localhost:9324/000000000000/ClearingPriceNotificationQueue
      STAGE: ${opt:stage, 'dev'}
  clearingPriceNotification:
    handler: src/functions/clearingPriceNotification.consume
    # reservedConcurrency: 1
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - ClearingPriceNotificationQueue
              - Arn
          batchSize: 10 # Number of messages to process at a time
    environment:
      TELEGRAM_BOT_TOKEN: ${file(../../config/config.${opt:stage, 'dev'}.json):BOT_TOKEN}
      STAGE: ${opt:stage, 'dev'}
# fargate:
#   memory: ${file(../../config/config.${opt:stage, 'dev'}.json):FARGATE_MEMORY}
#   cpu: ${file(../../config/config.${opt:stage, 'dev'}.json):FARGATE_CPU_CAPACITY}
#   vpc:
#     subnetIds:
#       - subnet-0c30ed67282a2c6a1
#       - subnet-08863b347d88e7b96
#       - subnet-086dc5ce1b0d85079
#       - subnet-0a77976618a0df2a3
#       - subnet-082f947fa4acc273d
#       - subnet-0c439fe51116ae512
#   logGroupName: launchbot-fargate-log-group
#   tasks:
#     referralProcessor:
#       name: processReferralInformation
#       image: referralProcessor
#       service:
#         desiredCount: 1
#         maximumPercent: 200
#         minimumHealthyPercent: 100
#         spot: false
#         # executionRoleArn: arn:aws:iam::381491854830:role/${opt:stage, 'dev'}-referral-task-role
#         # taskRoleArn: arn:aws:iam::381491854830:role/${opt:stage, 'dev'}-referral-execution-role
#         environment:
#           REFERRAL_TXS_TABLE_NAME: ${file(../../config/config.${opt:stage, 'dev'}.json):REFERRAL_TXS_TABLE_NAME}
#           REFERRAL_POINTS_TABLE_NAME: ${file(../../config/config.${opt:stage, 'dev'}.json):REFERRAL_POINTS_TABLE_NAME}
#           REFERRER_TABLE_NAME: ${file(../../config/config.${opt:stage, 'dev'}.json):REFERRER_TABLE_NAME}
#           STAGE: ${opt:stage, 'dev'}
resources:
  Resources:
    ClearingPriceNotificationQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${file(../../config/config.${opt:stage, 'dev'}.json):CLEARING_PRICE_NOTIFICATION_QUEUE_NAME}
        VisibilityTimeout: 900
        RedrivePolicy: # comment it to run it locally - seems like a bug in serverless-offline-sqs
          deadLetterTargetArn:
            Fn::GetAtt:
              - ClearingPriceNotificationDLQ
              - Arn
          maxReceiveCount: 10
    ClearingPriceNotificationDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${file(../../config/config.${opt:stage, 'dev'}.json):CLEARING_PRICE_NOTIFICATION_QUEUE_NAME}DLQ
    AuctionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${file(../../config/config.${opt:stage, 'dev'}.json):TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: auctionId
            AttributeType: S
        KeySchema:
          - AttributeName: auctionId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
    ReferralTransactionsTable: #stores the referral transactions that are used for processing later
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${file(../../config/config.${opt:stage, 'dev'}.json):REFERRAL_TXS_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: transactionHash
            AttributeType: "S"
        KeySchema:
          - AttributeName: transactionHash
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    ReferralPointsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${file(../../config/config.${opt:stage, 'dev'}.json):REFERRAL_POINTS_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: referralID
            AttributeType: "S"
        KeySchema:
          - AttributeName: referralID
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    ReferrerTable: #acts as a lock to prevent a user from getting referred more than once
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${file(../../config/config.${opt:stage, 'dev'}.json):REFERRER_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: userID
            AttributeType: "S"
        KeySchema:
          - AttributeName: userID
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    ReferralExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${opt:stage, 'dev'}-referral-execution-role
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: ecs-tasks.amazonaws.com
              Action: "sts:AssumeRole"
        Policies:
          - PolicyName: ${opt:stage, 'dev'}-referral-execution-policy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:Query
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                    - dynamodb:UpdateItem
                  Resource:
                    - arn:aws:dynamodb:us-east-1:381491854830:table/${file(../../config/config.${opt:stage, 'dev'}.json):REFERRAL_POINTS_TABLE_NAME}
                    - arn:aws:dynamodb:us-east-1:381491854830:table/${file(../../config/config.${opt:stage, 'dev'}.json):REFERRER_TABLE_NAME}
                    - arn:aws:dynamodb:us-east-1:381491854830:table/${file(../../config/config.${opt:stage, 'dev'}.json):REFERRAL_TXS_TABLE_NAME}
        ManagedPolicyArns:
          - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
    TaskRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${opt:stage, 'dev'}-referral-task-role
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service: ecs-tasks.amazonaws.com
              Action: "sts:AssumeRole"
        # ManagedPolicyArns:
        #   - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
    UserIdMappingsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${file(../../config/config.${opt:stage, 'dev'}.json):USER_ID_MAPPING_TABLE_NAME}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: auctionId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: auctionId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
    # ProcessReferralTask:
    #   Type: AWS::ECS::TaskDefinition
    #   Properties:
    #     ContainerDefinitions:
    #       - Image: referralProcessor
    #         Name: processReferralInformation
    #         Essential: true
    #         Environment:
    #           - Name: REFERRAL_TXS_TABLE_NAME
    #             Value: ${file(../../config/config.${opt:stage, 'dev'}.json):REFERRAL_TXS_TABLE_NAME}
    #           - Name: REFERRAL_POINTS_TABLE_NAME
    #             Value: ${file(../../config/config.${opt:stage, 'dev'}.json):REFERRAL_POINTS_TABLE_NAME}
    #           - Name: REFERRER_TABLE_NAME
    #             Value: ${file(../../config/config.${opt:stage, 'dev'}.json):REFERRER_TABLE_NAME}
    #           - Name: STAGE
    #             Value: ${opt:stage, 'dev'}
    #     Memory: ${file(../../config/config.${opt:stage, 'dev'}.json):FARGATE_MEMORY}
    #     Cpu: ${file(../../config/config.${opt:stage, 'dev'}.json):FARGATE_CPU_CAPACITY}
    #     ExecutionRoleArn: arn:aws:iam::381491854830:role/ecsTaskExecutionRole
    #     TaskRoleArn: arn:aws:iam::381491854830:role/${opt:stage, 'dev'}-referral-execution-role
    #     RequiresCompatibilities:
    #       - EC2
    #     NetworkMode: host
    # ProcessReferralService:
    #   Type: AWS::ECS::Service
    #   Properties:
    #     DesiredCount: 1
    #     LaunchType: EC2
    #     TaskDefinition: !Ref ProcessReferralTask
    #     Role: !Ref ECSServiceRole
    # ECSServiceRole:
    #   Type: "AWS::IAM::Role"
    #   Properties:
    #     AssumeRolePolicyDocument:
    #       Statement:
    #         - Effect: Allow
    #           Principal:
    #             Service:
    #               - ecs.amazonaws.com
    #           Action:
    #             - "sts:AssumeRole"
    #         - Effect: Allow
    #           Principal:
    #             Service:
    #               - ecs-tasks.amazonaws.com
    #           Action:
    #             - "sts:AssumeRole"
    #     Path: /
    #     Policies:
    #       - PolicyName: ecs-service
    #         PolicyDocument:
    #           Statement:
    #             - Effect: Allow
    #               Action:
    #                 - "elasticloadbalancing:DeregisterInstancesFromLoadBalancer"
    #                 - "elasticloadbalancing:DeregisterTargets"
    #                 - "elasticloadbalancing:Describe*"
    #                 - "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
    #                 - "elasticloadbalancing:RegisterTargets"
    #                 - "ec2:Describe*"
    #                 - "ec2:AuthorizeSecurityGroupIngress"
    #               Resource: "*"
